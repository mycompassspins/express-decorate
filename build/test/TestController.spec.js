"use strict";
const app_1 = require('./app');
const TestController_1 = require('./api/TestController');
const HttpHelper_1 = require('./helpers/HttpHelper');
describe('TestController', () => {
    let app = app_1.AppStart(3000), ctrl = new TestController_1.TestController(), expectedRoute = {
        method: 'get',
        mountpath: '/api/test',
        path: '/',
        fnName: 'TestMethod'
    };
    it('should have a $routes property with 1 configured route', (done) => {
        let ctrlCopy = Object.create(ctrl);
        expect(ctrlCopy['$routes']).toBeDefined();
        expect(ctrlCopy['$routes'].length).toEqual(2);
        expect(ctrlCopy['$routes'][0].middleware).toBeDefined();
        delete ctrlCopy['$routes'][0].middleware;
        expect(ctrlCopy['$routes'][0]).toEqual(expectedRoute);
        done();
    });
    it('should make a successful GET request', (done) => {
        HttpHelper_1.Request.Get('http://localhost:3000/api/test')
            .then((res) => {
            expect(res.success).toBeDefined();
            expect(res.success).toBe(true);
            done();
        });
    });
    it('should fire middleware before sending response', (done) => {
        HttpHelper_1.Request.Get('http://localhost:3000/api/test/middleware-test')
            .then((res) => {
            expect(res.success).toBeDefined();
            expect(res.success).toBe(true);
            expect(res.middleware).toBeDefined();
            expect(res.middleware).toBe('successful');
            app.Stop();
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvVGVzdENvbnRyb2xsZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsc0JBQXlCLE9BQ3pCLENBQUMsQ0FEK0I7QUFDaEMsaUNBQStCLHNCQUMvQixDQUFDLENBRG9EO0FBQ3JELDZCQUF3QixzQkFFeEIsQ0FBQyxDQUY2QztBQUU5QyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7SUFFMUIsSUFBSSxHQUFHLEdBQU8sY0FBUSxDQUFDLElBQUksQ0FBQyxFQUMzQixJQUFJLEdBQWtCLElBQUksK0JBQWMsRUFBRSxFQUMxQyxhQUFhLEdBQU87UUFDbkIsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUUsV0FBVztRQUN0QixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxZQUFZO0tBQ3BCLENBQUM7SUFFQSxFQUFFLENBQUMsd0RBQXdELEVBQUUsQ0FBQyxJQUFhO1FBRTFFLElBQUksUUFBUSxHQUFrQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBR3hELE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUV6QyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUM7SUFFTixFQUFFLENBQUMsc0NBQXNDLEVBQUUsQ0FBQyxJQUFhO1FBRXhELG9CQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO2FBQzNDLElBQUksQ0FBQyxDQUFDLEdBQU87WUFFYixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxDQUFDLElBQWE7UUFFbEUsb0JBQU8sQ0FBQyxHQUFHLENBQUMsZ0RBQWdELENBQUM7YUFDM0QsSUFBSSxDQUFDLENBQUMsR0FBTztZQUViLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWCxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L1Rlc3RDb250cm9sbGVyLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgSnVzdGluIG9uIDgvMjEvMTYuXG4gKi9cblxuaW1wb3J0IHsgQXBwU3RhcnQgfSBmcm9tICcuL2FwcCdcbmltcG9ydCB7IFRlc3RDb250cm9sbGVyIH0gZnJvbSAnLi9hcGkvVGVzdENvbnRyb2xsZXInXG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnLi9oZWxwZXJzL0h0dHBIZWxwZXInXG5cbmRlc2NyaWJlKCdUZXN0Q29udHJvbGxlcicsICgpID0+XG57XG5cdGxldCBhcHA6YW55ID0gQXBwU3RhcnQoMzAwMCksXG5cdFx0Y3RybDpUZXN0Q29udHJvbGxlciA9IG5ldyBUZXN0Q29udHJvbGxlcigpLFxuXHRcdGV4cGVjdGVkUm91dGU6YW55ID0ge1xuXHRcdFx0bWV0aG9kOiAnZ2V0Jyxcblx0XHRcdG1vdW50cGF0aDogJy9hcGkvdGVzdCcsXG5cdFx0XHRwYXRoOiAnLycsXG5cdFx0XHRmbk5hbWU6ICdUZXN0TWV0aG9kJ1xuXHRcdH07XG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgYSAkcm91dGVzIHByb3BlcnR5IHdpdGggMSBjb25maWd1cmVkIHJvdXRlJywgKGRvbmU6RnVuY3Rpb24pID0+XG4gICAge1xuICAgIFx0bGV0IGN0cmxDb3B5OlRlc3RDb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShjdHJsKTtcbiAgICAgICAgZXhwZWN0KGN0cmxDb3B5Wyckcm91dGVzJ10pLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChjdHJsQ29weVsnJHJvdXRlcyddLmxlbmd0aCkudG9FcXVhbCgyKTtcbiAgICAgICAgZXhwZWN0KGN0cmxDb3B5Wyckcm91dGVzJ11bMF0ubWlkZGxld2FyZSkudG9CZURlZmluZWQoKTtcblxuICAgICAgICAvLyBUT0RPOiBtaWRkbGV3YXJlIHByb3BlcnR5IGxvZ3MgYXMgYFsgW0Z1bmN0aW9uOiBUZXN0XSBdYCAtIEhvdyB0byBhZGQgdGhhdCB0byB0aGUgZXhwZWN0ZWRSb3V0ZSBvYmplY3Q/P1xuICAgICAgICBkZWxldGUgY3RybENvcHlbJyRyb3V0ZXMnXVswXS5taWRkbGV3YXJlO1xuXG4gICAgICAgIGV4cGVjdChjdHJsQ29weVsnJHJvdXRlcyddWzBdKS50b0VxdWFsKGV4cGVjdGVkUm91dGUpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG5cblx0aXQoJ3Nob3VsZCBtYWtlIGEgc3VjY2Vzc2Z1bCBHRVQgcmVxdWVzdCcsIChkb25lOkZ1bmN0aW9uKSA9PlxuXHR7XG5cdFx0UmVxdWVzdC5HZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdCcpXG5cdFx0XHQudGhlbigocmVzOmFueSkgPT5cblx0XHRcdHtcblx0XHRcdFx0ZXhwZWN0KHJlcy5zdWNjZXNzKS50b0JlRGVmaW5lZCgpO1xuXHRcdFx0XHRleHBlY3QocmVzLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG5cdFx0XHRcdGRvbmUoKTtcblx0XHRcdH0pO1xuXHR9KTtcblxuXHRpdCgnc2hvdWxkIGZpcmUgbWlkZGxld2FyZSBiZWZvcmUgc2VuZGluZyByZXNwb25zZScsIChkb25lOkZ1bmN0aW9uKSA9PlxuXHR7XG5cdFx0UmVxdWVzdC5HZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdC9taWRkbGV3YXJlLXRlc3QnKVxuXHRcdFx0LnRoZW4oKHJlczphbnkpID0+XG5cdFx0XHR7XG5cdFx0XHRcdGV4cGVjdChyZXMuc3VjY2VzcykudG9CZURlZmluZWQoKTtcblx0XHRcdFx0ZXhwZWN0KHJlcy5zdWNjZXNzKS50b0JlKHRydWUpO1xuXHRcdFx0XHRleHBlY3QocmVzLm1pZGRsZXdhcmUpLnRvQmVEZWZpbmVkKCk7XG5cdFx0XHRcdGV4cGVjdChyZXMubWlkZGxld2FyZSkudG9CZSgnc3VjY2Vzc2Z1bCcpO1xuXHRcdFx0XHRhcHAuU3RvcCgpO1xuXHRcdFx0XHRkb25lKCk7XG5cdFx0XHR9KTtcblx0fSlcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
