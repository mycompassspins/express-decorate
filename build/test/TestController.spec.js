"use strict";
const app_1 = require('./app');
const TestController_1 = require('./api/TestController');
const HttpHelper_1 = require('./helpers/HttpHelper');
describe('TestController', () => {
    let app = app_1.AppStart(3000), ctrl = new TestController_1.TestController(), expectedRoute = {
        method: 'get',
        mountpath: '/api/test',
        path: '/',
        fnName: 'TestMethod'
    };
    it('should have a $routes property with 3 configured routes', (done) => {
        let ctrlCopy = Object.create(ctrl);
        expect(ctrlCopy['$routes']).toBeDefined();
        expect(ctrlCopy['$routes'].length).toEqual(3);
        expect(ctrlCopy['$routes'][0].middleware).toBeDefined();
        delete ctrlCopy['$routes'][0].middleware;
        expect(ctrlCopy['$routes'][0]).toEqual(expectedRoute);
        done();
    });
    it('should make a successful GET request', (done) => {
        HttpHelper_1.Request.Get('http://localhost:3000/api/test')
            .then((res) => {
            expect(res.success).toBeDefined();
            expect(res.success).toBe(true);
            done();
        });
    });
    it('should fire middleware before sending response', (done) => {
        HttpHelper_1.Request.Get('http://localhost:3000/api/test/middleware-test')
            .then((res) => {
            expect(res.success).toBeDefined();
            expect(res.success).toBe(true);
            expect(res.middleware).toBeDefined();
            expect(res.middleware).toBe('successful');
            app.Stop();
            done();
        });
    });
    it('should make a successful websocket request', (done) => {
        expect(true).toBe(true);
        app.Stop();
        done();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvVGVzdENvbnRyb2xsZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBTUEsc0JBQXlCLE9BQ3pCLENBQUMsQ0FEK0I7QUFDaEMsaUNBQStCLHNCQUMvQixDQUFDLENBRG9EO0FBQ3JELDZCQUF3QixzQkFFeEIsQ0FBQyxDQUY2QztBQUU5QyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7SUFFMUIsSUFBSSxHQUFHLEdBQU8sY0FBUSxDQUFDLElBQUksQ0FBQyxFQUMzQixJQUFJLEdBQWtCLElBQUksK0JBQWMsRUFBRSxFQUMxQyxhQUFhLEdBQU87UUFDbkIsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUUsV0FBVztRQUN0QixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxZQUFZO0tBQ3BCLENBQUM7SUFFQSxFQUFFLENBQUMseURBQXlELEVBQUUsQ0FBQyxJQUFhO1FBRTNFLElBQUksUUFBUSxHQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBR3hELE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUV6QyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUM7SUFFTixFQUFFLENBQUMsc0NBQXNDLEVBQUUsQ0FBQyxJQUFhO1FBRXhELG9CQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO2FBQzNDLElBQUksQ0FBQyxDQUFDLEdBQU87WUFFYixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxDQUFDLElBQWE7UUFFbEUsb0JBQU8sQ0FBQyxHQUFHLENBQUMsZ0RBQWdELENBQUM7YUFDM0QsSUFBSSxDQUFDLENBQUMsR0FBTztZQUViLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWCxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFHSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxJQUFhO1FBRTlELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1gsSUFBSSxFQUFFLENBQUM7SUFDUixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvVGVzdENvbnRyb2xsZXIuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBKdXN0aW4gb24gOC8yMS8xNi5cbiAqL1xuXG4vLy88cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwZXNjcmlwdC9saWIvbGliLmVzNi5kLnRzXCIgLz5cblxuaW1wb3J0IHsgQXBwU3RhcnQgfSBmcm9tICcuL2FwcCdcbmltcG9ydCB7IFRlc3RDb250cm9sbGVyIH0gZnJvbSAnLi9hcGkvVGVzdENvbnRyb2xsZXInXG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnLi9oZWxwZXJzL0h0dHBIZWxwZXInXG5cbmRlc2NyaWJlKCdUZXN0Q29udHJvbGxlcicsICgpID0+XG57XG5cdGxldCBhcHA6YW55ID0gQXBwU3RhcnQoMzAwMCksXG5cdFx0Y3RybDpUZXN0Q29udHJvbGxlciA9IG5ldyBUZXN0Q29udHJvbGxlcigpLFxuXHRcdGV4cGVjdGVkUm91dGU6YW55ID0ge1xuXHRcdFx0bWV0aG9kOiAnZ2V0Jyxcblx0XHRcdG1vdW50cGF0aDogJy9hcGkvdGVzdCcsXG5cdFx0XHRwYXRoOiAnLycsXG5cdFx0XHRmbk5hbWU6ICdUZXN0TWV0aG9kJ1xuXHRcdH07XG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgYSAkcm91dGVzIHByb3BlcnR5IHdpdGggMyBjb25maWd1cmVkIHJvdXRlcycsIChkb25lOkZ1bmN0aW9uKSA9PlxuICAgIHtcbiAgICBcdGxldCBjdHJsQ29weTpUZXN0Q29udHJvbGxlcnxhbnkgPSBPYmplY3QuY3JlYXRlKGN0cmwpO1xuICAgICAgICBleHBlY3QoY3RybENvcHlbJyRyb3V0ZXMnXSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGN0cmxDb3B5Wyckcm91dGVzJ10ubGVuZ3RoKS50b0VxdWFsKDMpO1xuICAgICAgICBleHBlY3QoY3RybENvcHlbJyRyb3V0ZXMnXVswXS5taWRkbGV3YXJlKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgICAgIC8vIFRPRE86IG1pZGRsZXdhcmUgcHJvcGVydHkgbG9ncyBhcyBgWyBbRnVuY3Rpb246IFRlc3RdIF1gIC0gSG93IHRvIGFkZCB0aGF0IHRvIHRoZSBleHBlY3RlZFJvdXRlIG9iamVjdD8/XG4gICAgICAgIGRlbGV0ZSBjdHJsQ29weVsnJHJvdXRlcyddWzBdLm1pZGRsZXdhcmU7XG5cbiAgICAgICAgZXhwZWN0KGN0cmxDb3B5Wyckcm91dGVzJ11bMF0pLnRvRXF1YWwoZXhwZWN0ZWRSb3V0ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuXHRpdCgnc2hvdWxkIG1ha2UgYSBzdWNjZXNzZnVsIEdFVCByZXF1ZXN0JywgKGRvbmU6RnVuY3Rpb24pID0+XG5cdHtcblx0XHRSZXF1ZXN0LkdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS90ZXN0Jylcblx0XHRcdC50aGVuKChyZXM6YW55KSA9PlxuXHRcdFx0e1xuXHRcdFx0XHRleHBlY3QocmVzLnN1Y2Nlc3MpLnRvQmVEZWZpbmVkKCk7XG5cdFx0XHRcdGV4cGVjdChyZXMuc3VjY2VzcykudG9CZSh0cnVlKTtcblx0XHRcdFx0ZG9uZSgpO1xuXHRcdFx0fSk7XG5cdH0pO1xuXG5cdGl0KCdzaG91bGQgZmlyZSBtaWRkbGV3YXJlIGJlZm9yZSBzZW5kaW5nIHJlc3BvbnNlJywgKGRvbmU6RnVuY3Rpb24pID0+XG5cdHtcblx0XHRSZXF1ZXN0LkdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS90ZXN0L21pZGRsZXdhcmUtdGVzdCcpXG5cdFx0XHQudGhlbigocmVzOmFueSkgPT5cblx0XHRcdHtcblx0XHRcdFx0ZXhwZWN0KHJlcy5zdWNjZXNzKS50b0JlRGVmaW5lZCgpO1xuXHRcdFx0XHRleHBlY3QocmVzLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG5cdFx0XHRcdGV4cGVjdChyZXMubWlkZGxld2FyZSkudG9CZURlZmluZWQoKTtcblx0XHRcdFx0ZXhwZWN0KHJlcy5taWRkbGV3YXJlKS50b0JlKCdzdWNjZXNzZnVsJyk7XG5cdFx0XHRcdGFwcC5TdG9wKCk7XG5cdFx0XHRcdGRvbmUoKTtcblx0XHRcdH0pO1xuXHR9KTtcblxuXHQvLyBUT0RPOiBIb3cgdG8gYWN0dWFsbHkgdGVzdCBhIHdlYnNvY2tldCByZXF1ZXN0Pz9cblx0aXQoJ3Nob3VsZCBtYWtlIGEgc3VjY2Vzc2Z1bCB3ZWJzb2NrZXQgcmVxdWVzdCcsIChkb25lOkZ1bmN0aW9uKSA9PlxuXHR7XG5cdFx0ZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XG5cdFx0YXBwLlN0b3AoKTtcblx0XHRkb25lKCk7XG5cdH0pXG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
